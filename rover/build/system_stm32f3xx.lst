ARM GAS  /tmp/ccE4vhol.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"system_stm32f3xx.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.SystemInit,"ax",%progbits
  21              		.align	2
  22              		.global	SystemInit
  23              		.thumb
  24              		.thumb_func
  26              	SystemInit:
  27              	.LFB123:
  28              		.file 1 "Src/system_stm32f3xx.c"
   1:Src/system_stm32f3xx.c **** /**
   2:Src/system_stm32f3xx.c ****   ******************************************************************************
   3:Src/system_stm32f3xx.c ****   * @file    system_stm32f3xx.c
   4:Src/system_stm32f3xx.c ****   * @author  MCD Application Team
   5:Src/system_stm32f3xx.c ****   * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
   6:Src/system_stm32f3xx.c ****   *
   7:Src/system_stm32f3xx.c ****   * 1. This file provides two functions and one global variable to be called from
   8:Src/system_stm32f3xx.c ****   *    user application:
   9:Src/system_stm32f3xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:Src/system_stm32f3xx.c ****   *                      before branch to main program. This call is made inside
  11:Src/system_stm32f3xx.c ****   *                      the "startup_stm32f3xx.s" file.
  12:Src/system_stm32f3xx.c ****   *
  13:Src/system_stm32f3xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Src/system_stm32f3xx.c ****   *                                  by the user application to setup the SysTick
  15:Src/system_stm32f3xx.c ****   *                                  timer or configure other parameters.
  16:Src/system_stm32f3xx.c ****   *
  17:Src/system_stm32f3xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Src/system_stm32f3xx.c ****   *                                 be called whenever the core clock is changed
  19:Src/system_stm32f3xx.c ****   *                                 during program execution.
  20:Src/system_stm32f3xx.c ****   *
  21:Src/system_stm32f3xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  22:Src/system_stm32f3xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f3xx.s" file, to
  23:Src/system_stm32f3xx.c ****   *    configure the system clock before to branch to main program.
  24:Src/system_stm32f3xx.c ****   *
  25:Src/system_stm32f3xx.c ****   * 3. This file configures the system clock as follows:
  26:Src/system_stm32f3xx.c ****   *=============================================================================
  27:Src/system_stm32f3xx.c ****   *                         Supported STM32F3xx device
  28:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  29:Src/system_stm32f3xx.c ****   *        System Clock source                    | HSI
  30:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
ARM GAS  /tmp/ccE4vhol.s 			page 2


  31:Src/system_stm32f3xx.c ****   *        SYSCLK(Hz)                             | 8000000
  32:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  33:Src/system_stm32f3xx.c ****   *        HCLK(Hz)                               | 8000000
  34:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  35:Src/system_stm32f3xx.c ****   *        AHB Prescaler                          | 1
  36:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  37:Src/system_stm32f3xx.c ****   *        APB2 Prescaler                         | 1
  38:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  39:Src/system_stm32f3xx.c ****   *        APB1 Prescaler                         | 1
  40:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  41:Src/system_stm32f3xx.c ****   *        USB Clock                              | DISABLE
  42:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  43:Src/system_stm32f3xx.c ****   *=============================================================================
  44:Src/system_stm32f3xx.c ****   ******************************************************************************
  45:Src/system_stm32f3xx.c ****   * @attention
  46:Src/system_stm32f3xx.c ****   *
  47:Src/system_stm32f3xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  48:Src/system_stm32f3xx.c ****   *
  49:Src/system_stm32f3xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  50:Src/system_stm32f3xx.c ****   * are permitted provided that the following conditions are met:
  51:Src/system_stm32f3xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  52:Src/system_stm32f3xx.c ****   *      this list of conditions and the following disclaimer.
  53:Src/system_stm32f3xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  54:Src/system_stm32f3xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  55:Src/system_stm32f3xx.c ****   *      and/or other materials provided with the distribution.
  56:Src/system_stm32f3xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  57:Src/system_stm32f3xx.c ****   *      may be used to endorse or promote products derived from this software
  58:Src/system_stm32f3xx.c ****   *      without specific prior written permission.
  59:Src/system_stm32f3xx.c ****   *
  60:Src/system_stm32f3xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  61:Src/system_stm32f3xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  62:Src/system_stm32f3xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  63:Src/system_stm32f3xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  64:Src/system_stm32f3xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  65:Src/system_stm32f3xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  66:Src/system_stm32f3xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  67:Src/system_stm32f3xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  68:Src/system_stm32f3xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  69:Src/system_stm32f3xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  70:Src/system_stm32f3xx.c ****   *
  71:Src/system_stm32f3xx.c ****   ******************************************************************************
  72:Src/system_stm32f3xx.c ****   */
  73:Src/system_stm32f3xx.c **** 
  74:Src/system_stm32f3xx.c **** /** @addtogroup CMSIS
  75:Src/system_stm32f3xx.c ****   * @{
  76:Src/system_stm32f3xx.c ****   */
  77:Src/system_stm32f3xx.c **** 
  78:Src/system_stm32f3xx.c **** /** @addtogroup stm32f3xx_system
  79:Src/system_stm32f3xx.c ****   * @{
  80:Src/system_stm32f3xx.c ****   */
  81:Src/system_stm32f3xx.c **** 
  82:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Includes
  83:Src/system_stm32f3xx.c ****   * @{
  84:Src/system_stm32f3xx.c ****   */
  85:Src/system_stm32f3xx.c **** 
  86:Src/system_stm32f3xx.c **** #include "stm32f3xx.h"
  87:Src/system_stm32f3xx.c **** 
ARM GAS  /tmp/ccE4vhol.s 			page 3


  88:Src/system_stm32f3xx.c **** /**
  89:Src/system_stm32f3xx.c ****   * @}
  90:Src/system_stm32f3xx.c ****   */
  91:Src/system_stm32f3xx.c **** 
  92:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_TypesDefinitions
  93:Src/system_stm32f3xx.c ****   * @{
  94:Src/system_stm32f3xx.c ****   */
  95:Src/system_stm32f3xx.c **** 
  96:Src/system_stm32f3xx.c **** /**
  97:Src/system_stm32f3xx.c ****   * @}
  98:Src/system_stm32f3xx.c ****   */
  99:Src/system_stm32f3xx.c **** 
 100:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Defines
 101:Src/system_stm32f3xx.c ****   * @{
 102:Src/system_stm32f3xx.c ****   */
 103:Src/system_stm32f3xx.c **** #if !defined  (HSE_VALUE) 
 104:Src/system_stm32f3xx.c ****   #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz.
 105:Src/system_stm32f3xx.c ****                                                 This value can be provided and adapted by the user 
 106:Src/system_stm32f3xx.c **** #endif /* HSE_VALUE */
 107:Src/system_stm32f3xx.c **** 
 108:Src/system_stm32f3xx.c **** #if !defined  (HSI_VALUE)
 109:Src/system_stm32f3xx.c ****   #define HSI_VALUE    ((uint32_t)8000000) /*!< Default value of the Internal oscillator in Hz.
 110:Src/system_stm32f3xx.c ****                                                 This value can be provided and adapted by the user 
 111:Src/system_stm32f3xx.c **** #endif /* HSI_VALUE */
 112:Src/system_stm32f3xx.c **** 
 113:Src/system_stm32f3xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 114:Src/system_stm32f3xx.c ****      Internal SRAM. */
 115:Src/system_stm32f3xx.c **** /* #define VECT_TAB_SRAM */
 116:Src/system_stm32f3xx.c **** #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field.
 117:Src/system_stm32f3xx.c ****                                   This value must be a multiple of 0x200. */
 118:Src/system_stm32f3xx.c **** /**
 119:Src/system_stm32f3xx.c ****   * @}
 120:Src/system_stm32f3xx.c ****   */
 121:Src/system_stm32f3xx.c **** 
 122:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Macros
 123:Src/system_stm32f3xx.c ****   * @{
 124:Src/system_stm32f3xx.c ****   */
 125:Src/system_stm32f3xx.c **** 
 126:Src/system_stm32f3xx.c **** /**
 127:Src/system_stm32f3xx.c ****   * @}
 128:Src/system_stm32f3xx.c ****   */
 129:Src/system_stm32f3xx.c **** 
 130:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Variables
 131:Src/system_stm32f3xx.c ****   * @{
 132:Src/system_stm32f3xx.c ****   */
 133:Src/system_stm32f3xx.c ****   /* This variable is updated in three ways:
 134:Src/system_stm32f3xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 135:Src/system_stm32f3xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 136:Src/system_stm32f3xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 137:Src/system_stm32f3xx.c ****          Note: If you use this function to configure the system clock there is no need to
 138:Src/system_stm32f3xx.c ****                call the 2 first functions listed above, since SystemCoreClock variable is 
 139:Src/system_stm32f3xx.c ****                updated automatically.
 140:Src/system_stm32f3xx.c ****   */
 141:Src/system_stm32f3xx.c **** uint32_t SystemCoreClock = 8000000;
 142:Src/system_stm32f3xx.c **** 
 143:Src/system_stm32f3xx.c **** const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 144:Src/system_stm32f3xx.c **** const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};
ARM GAS  /tmp/ccE4vhol.s 			page 4


 145:Src/system_stm32f3xx.c **** 
 146:Src/system_stm32f3xx.c **** /**
 147:Src/system_stm32f3xx.c ****   * @}
 148:Src/system_stm32f3xx.c ****   */
 149:Src/system_stm32f3xx.c **** 
 150:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_FunctionPrototypes
 151:Src/system_stm32f3xx.c ****   * @{
 152:Src/system_stm32f3xx.c ****   */
 153:Src/system_stm32f3xx.c **** 
 154:Src/system_stm32f3xx.c **** /**
 155:Src/system_stm32f3xx.c ****   * @}
 156:Src/system_stm32f3xx.c ****   */
 157:Src/system_stm32f3xx.c **** 
 158:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Functions
 159:Src/system_stm32f3xx.c ****   * @{
 160:Src/system_stm32f3xx.c ****   */
 161:Src/system_stm32f3xx.c **** 
 162:Src/system_stm32f3xx.c **** /**
 163:Src/system_stm32f3xx.c ****   * @brief  Setup the microcontroller system
 164:Src/system_stm32f3xx.c ****   *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
 165:Src/system_stm32f3xx.c ****   * @param  None
 166:Src/system_stm32f3xx.c ****   * @retval None
 167:Src/system_stm32f3xx.c ****   */
 168:Src/system_stm32f3xx.c **** void SystemInit(void)
 169:Src/system_stm32f3xx.c **** {
  29              		.loc 1 169 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 170:Src/system_stm32f3xx.c ****   /* FPU settings ------------------------------------------------------------*/
 171:Src/system_stm32f3xx.c ****   #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 172:Src/system_stm32f3xx.c ****     SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  34              		.loc 1 172 0
  35 0000 1549     		ldr	r1, .L2
  36 0002 D1F88830 		ldr	r3, [r1, #136]
  37 0006 43F47003 		orr	r3, r3, #15728640
  38 000a C1F88830 		str	r3, [r1, #136]
 173:Src/system_stm32f3xx.c ****   #endif
 174:Src/system_stm32f3xx.c **** 
 175:Src/system_stm32f3xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 176:Src/system_stm32f3xx.c ****   /* Set HSION bit */
 177:Src/system_stm32f3xx.c ****   RCC->CR |= 0x00000001U;
  39              		.loc 1 177 0
  40 000e 134B     		ldr	r3, .L2+4
  41 0010 1A68     		ldr	r2, [r3]
  42 0012 42F00102 		orr	r2, r2, #1
  43 0016 1A60     		str	r2, [r3]
 178:Src/system_stm32f3xx.c **** 
 179:Src/system_stm32f3xx.c ****   /* Reset CFGR register */
 180:Src/system_stm32f3xx.c ****   RCC->CFGR &= 0xF87FC00CU;
  44              		.loc 1 180 0
  45 0018 5868     		ldr	r0, [r3, #4]
  46 001a 114A     		ldr	r2, .L2+8
  47 001c 0240     		ands	r2, r2, r0
  48 001e 5A60     		str	r2, [r3, #4]
 181:Src/system_stm32f3xx.c **** 
ARM GAS  /tmp/ccE4vhol.s 			page 5


 182:Src/system_stm32f3xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 183:Src/system_stm32f3xx.c ****   RCC->CR &= 0xFEF6FFFFU;
  49              		.loc 1 183 0
  50 0020 1A68     		ldr	r2, [r3]
  51 0022 22F08472 		bic	r2, r2, #17301504
  52 0026 22F48032 		bic	r2, r2, #65536
  53 002a 1A60     		str	r2, [r3]
 184:Src/system_stm32f3xx.c **** 
 185:Src/system_stm32f3xx.c ****   /* Reset HSEBYP bit */
 186:Src/system_stm32f3xx.c ****   RCC->CR &= 0xFFFBFFFFU;
  54              		.loc 1 186 0
  55 002c 1A68     		ldr	r2, [r3]
  56 002e 22F48022 		bic	r2, r2, #262144
  57 0032 1A60     		str	r2, [r3]
 187:Src/system_stm32f3xx.c **** 
 188:Src/system_stm32f3xx.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
 189:Src/system_stm32f3xx.c ****   RCC->CFGR &= 0xFF80FFFFU;
  58              		.loc 1 189 0
  59 0034 5A68     		ldr	r2, [r3, #4]
  60 0036 22F4FE02 		bic	r2, r2, #8323072
  61 003a 5A60     		str	r2, [r3, #4]
 190:Src/system_stm32f3xx.c **** 
 191:Src/system_stm32f3xx.c ****   /* Reset PREDIV1[3:0] bits */
 192:Src/system_stm32f3xx.c ****   RCC->CFGR2 &= 0xFFFFFFF0U;
  62              		.loc 1 192 0
  63 003c DA6A     		ldr	r2, [r3, #44]
  64 003e 22F00F02 		bic	r2, r2, #15
  65 0042 DA62     		str	r2, [r3, #44]
 193:Src/system_stm32f3xx.c **** 
 194:Src/system_stm32f3xx.c ****   /* Reset USARTSW[1:0], I2CSW and TIMs bits */
 195:Src/system_stm32f3xx.c ****   RCC->CFGR3 &= 0xFF00FCCCU;
  66              		.loc 1 195 0
  67 0044 186B     		ldr	r0, [r3, #48]
  68 0046 074A     		ldr	r2, .L2+12
  69 0048 0240     		ands	r2, r2, r0
  70 004a 1A63     		str	r2, [r3, #48]
 196:Src/system_stm32f3xx.c **** 
 197:Src/system_stm32f3xx.c ****   /* Disable all interrupts */
 198:Src/system_stm32f3xx.c ****   RCC->CIR = 0x00000000U;
  71              		.loc 1 198 0
  72 004c 0022     		movs	r2, #0
  73 004e 9A60     		str	r2, [r3, #8]
 199:Src/system_stm32f3xx.c **** 
 200:Src/system_stm32f3xx.c **** #ifdef VECT_TAB_SRAM
 201:Src/system_stm32f3xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 202:Src/system_stm32f3xx.c **** #else
 203:Src/system_stm32f3xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
  74              		.loc 1 203 0
  75 0050 4FF00063 		mov	r3, #134217728
  76 0054 8B60     		str	r3, [r1, #8]
  77 0056 7047     		bx	lr
  78              	.L3:
  79              		.align	2
  80              	.L2:
  81 0058 00ED00E0 		.word	-536810240
  82 005c 00100240 		.word	1073876992
  83 0060 0CC07FF8 		.word	-125845492
ARM GAS  /tmp/ccE4vhol.s 			page 6


  84 0064 CCFC00FF 		.word	-16712500
  85              		.cfi_endproc
  86              	.LFE123:
  88              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  89              		.align	2
  90              		.global	SystemCoreClockUpdate
  91              		.thumb
  92              		.thumb_func
  94              	SystemCoreClockUpdate:
  95              	.LFB124:
 204:Src/system_stm32f3xx.c **** #endif
 205:Src/system_stm32f3xx.c **** }
 206:Src/system_stm32f3xx.c **** 
 207:Src/system_stm32f3xx.c **** /**
 208:Src/system_stm32f3xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 209:Src/system_stm32f3xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 210:Src/system_stm32f3xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 211:Src/system_stm32f3xx.c ****   *         other parameters.
 212:Src/system_stm32f3xx.c ****   *
 213:Src/system_stm32f3xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 214:Src/system_stm32f3xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 215:Src/system_stm32f3xx.c ****   *         based on this variable will be incorrect.
 216:Src/system_stm32f3xx.c ****   *
 217:Src/system_stm32f3xx.c ****   * @note   - The system frequency computed by this function is not the real
 218:Src/system_stm32f3xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 219:Src/system_stm32f3xx.c ****   *           constant and the selected clock source:
 220:Src/system_stm32f3xx.c ****   *
 221:Src/system_stm32f3xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 222:Src/system_stm32f3xx.c ****   *
 223:Src/system_stm32f3xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 224:Src/system_stm32f3xx.c ****   *
 225:Src/system_stm32f3xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 226:Src/system_stm32f3xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 227:Src/system_stm32f3xx.c ****   *
 228:Src/system_stm32f3xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f3xx_hal.h file (default value
 229:Src/system_stm32f3xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 230:Src/system_stm32f3xx.c ****   *             in voltage and temperature.
 231:Src/system_stm32f3xx.c ****   *
 232:Src/system_stm32f3xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f3xx_hal.h file (default value
 233:Src/system_stm32f3xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 234:Src/system_stm32f3xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 235:Src/system_stm32f3xx.c ****   *              have wrong result.
 236:Src/system_stm32f3xx.c ****   *
 237:Src/system_stm32f3xx.c ****   *         - The result of this function could be not correct when using fractional
 238:Src/system_stm32f3xx.c ****   *           value for HSE crystal.
 239:Src/system_stm32f3xx.c ****   *
 240:Src/system_stm32f3xx.c ****   * @param  None
 241:Src/system_stm32f3xx.c ****   * @retval None
 242:Src/system_stm32f3xx.c ****   */
 243:Src/system_stm32f3xx.c **** void SystemCoreClockUpdate (void)
 244:Src/system_stm32f3xx.c **** {
  96              		.loc 1 244 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101              	.LVL0:
ARM GAS  /tmp/ccE4vhol.s 			page 7


 245:Src/system_stm32f3xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 246:Src/system_stm32f3xx.c **** 
 247:Src/system_stm32f3xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 248:Src/system_stm32f3xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 102              		.loc 1 248 0
 103 0000 1E4B     		ldr	r3, .L12
 104 0002 5B68     		ldr	r3, [r3, #4]
 105 0004 03F00C03 		and	r3, r3, #12
 106              	.LVL1:
 249:Src/system_stm32f3xx.c **** 
 250:Src/system_stm32f3xx.c ****   switch (tmp)
 107              		.loc 1 250 0
 108 0008 042B     		cmp	r3, #4
 109 000a 06D0     		beq	.L6
 110 000c 082B     		cmp	r3, #8
 111 000e 08D0     		beq	.L7
 112 0010 33BB     		cbnz	r3, .L11
 251:Src/system_stm32f3xx.c ****   {
 252:Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
 253:Src/system_stm32f3xx.c ****       SystemCoreClock = HSI_VALUE;
 113              		.loc 1 253 0
 114 0012 1B4A     		ldr	r2, .L12+4
 115 0014 1B4B     		ldr	r3, .L12+8
 116              	.LVL2:
 117 0016 1A60     		str	r2, [r3]
 254:Src/system_stm32f3xx.c ****       break;
 118              		.loc 1 254 0
 119 0018 25E0     		b	.L9
 120              	.LVL3:
 121              	.L6:
 255:Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
 256:Src/system_stm32f3xx.c ****       SystemCoreClock = HSE_VALUE;
 122              		.loc 1 256 0
 123 001a 194A     		ldr	r2, .L12+4
 124 001c 194B     		ldr	r3, .L12+8
 125              	.LVL4:
 126 001e 1A60     		str	r2, [r3]
 257:Src/system_stm32f3xx.c ****       break;
 127              		.loc 1 257 0
 128 0020 21E0     		b	.L9
 129              	.LVL5:
 130              	.L7:
 258:Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 259:Src/system_stm32f3xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 260:Src/system_stm32f3xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 131              		.loc 1 260 0
 132 0022 164A     		ldr	r2, .L12
 133 0024 5368     		ldr	r3, [r2, #4]
 134              	.LVL6:
 261:Src/system_stm32f3xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 135              		.loc 1 261 0
 136 0026 5168     		ldr	r1, [r2, #4]
 137 0028 01F4C031 		and	r1, r1, #98304
 138              	.LVL7:
 262:Src/system_stm32f3xx.c ****       pllmull = ( pllmull >> 18) + 2;
 139              		.loc 1 262 0
 140 002c C3F38343 		ubfx	r3, r3, #18, #4
ARM GAS  /tmp/ccE4vhol.s 			page 8


 141              	.LVL8:
 142 0030 0233     		adds	r3, r3, #2
 143              	.LVL9:
 263:Src/system_stm32f3xx.c **** 
 264:Src/system_stm32f3xx.c **** #if defined (STM32F302xE) || defined (STM32F303xE) || defined (STM32F398xx)
 265:Src/system_stm32f3xx.c ****         predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 144              		.loc 1 265 0
 145 0032 D26A     		ldr	r2, [r2, #44]
 146 0034 02F00F02 		and	r2, r2, #15
 147 0038 0132     		adds	r2, r2, #1
 148              	.LVL10:
 266:Src/system_stm32f3xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 149              		.loc 1 266 0
 150 003a B1F5803F 		cmp	r1, #65536
 151 003e 07D1     		bne	.L10
 267:Src/system_stm32f3xx.c ****       {
 268:Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 269:Src/system_stm32f3xx.c ****         SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 152              		.loc 1 269 0
 153 0040 0F49     		ldr	r1, .L12+4
 154              	.LVL11:
 155 0042 B1FBF2F2 		udiv	r2, r1, r2
 156              	.LVL12:
 157 0046 03FB02F3 		mul	r3, r3, r2
 158              	.LVL13:
 159 004a 0E4A     		ldr	r2, .L12+8
 160 004c 1360     		str	r3, [r2]
 161 004e 0AE0     		b	.L9
 162              	.LVL14:
 163              	.L10:
 270:Src/system_stm32f3xx.c ****       }
 271:Src/system_stm32f3xx.c ****       else
 272:Src/system_stm32f3xx.c ****       {
 273:Src/system_stm32f3xx.c ****         /* HSI oscillator clock selected as PREDIV1 clock entry */
 274:Src/system_stm32f3xx.c ****         SystemCoreClock = (HSI_VALUE / predivfactor) * pllmull;
 164              		.loc 1 274 0
 165 0050 0B49     		ldr	r1, .L12+4
 166              	.LVL15:
 167 0052 B1FBF2F2 		udiv	r2, r1, r2
 168              	.LVL16:
 169 0056 03FB02F3 		mul	r3, r3, r2
 170              	.LVL17:
 171 005a 0A4A     		ldr	r2, .L12+8
 172 005c 1360     		str	r3, [r2]
 173 005e 02E0     		b	.L9
 174              	.LVL18:
 175              	.L11:
 275:Src/system_stm32f3xx.c ****       }
 276:Src/system_stm32f3xx.c **** #else      
 277:Src/system_stm32f3xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 278:Src/system_stm32f3xx.c ****       {
 279:Src/system_stm32f3xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 280:Src/system_stm32f3xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 281:Src/system_stm32f3xx.c ****       }
 282:Src/system_stm32f3xx.c ****       else
 283:Src/system_stm32f3xx.c ****       {
 284:Src/system_stm32f3xx.c ****         predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
ARM GAS  /tmp/ccE4vhol.s 			page 9


 285:Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 286:Src/system_stm32f3xx.c ****         SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 287:Src/system_stm32f3xx.c ****       }
 288:Src/system_stm32f3xx.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx */
 289:Src/system_stm32f3xx.c ****       break;
 290:Src/system_stm32f3xx.c ****     default: /* HSI used as system clock */
 291:Src/system_stm32f3xx.c ****       SystemCoreClock = HSI_VALUE;
 176              		.loc 1 291 0
 177 0060 074A     		ldr	r2, .L12+4
 178 0062 084B     		ldr	r3, .L12+8
 179              	.LVL19:
 180 0064 1A60     		str	r2, [r3]
 181              	.LVL20:
 182              	.L9:
 292:Src/system_stm32f3xx.c ****       break;
 293:Src/system_stm32f3xx.c ****   }
 294:Src/system_stm32f3xx.c ****   /* Compute HCLK clock frequency ----------------*/
 295:Src/system_stm32f3xx.c ****   /* Get HCLK prescaler */
 296:Src/system_stm32f3xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 183              		.loc 1 296 0
 184 0066 054B     		ldr	r3, .L12
 185 0068 5B68     		ldr	r3, [r3, #4]
 186 006a C3F30313 		ubfx	r3, r3, #4, #4
 187 006e 064A     		ldr	r2, .L12+12
 188 0070 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 189              	.LVL21:
 297:Src/system_stm32f3xx.c ****   /* HCLK clock frequency */
 298:Src/system_stm32f3xx.c ****   SystemCoreClock >>= tmp;
 190              		.loc 1 298 0
 191 0072 044A     		ldr	r2, .L12+8
 192 0074 1368     		ldr	r3, [r2]
 193 0076 CB40     		lsrs	r3, r3, r1
 194 0078 1360     		str	r3, [r2]
 195 007a 7047     		bx	lr
 196              	.L13:
 197              		.align	2
 198              	.L12:
 199 007c 00100240 		.word	1073876992
 200 0080 00127A00 		.word	8000000
 201 0084 00000000 		.word	.LANCHOR0
 202 0088 00000000 		.word	.LANCHOR1
 203              		.cfi_endproc
 204              	.LFE124:
 206              		.global	APBPrescTable
 207              		.global	AHBPrescTable
 208              		.global	SystemCoreClock
 209              		.section	.rodata.AHBPrescTable,"a",%progbits
 210              		.align	2
 211              		.set	.LANCHOR1,. + 0
 214              	AHBPrescTable:
 215 0000 00       		.byte	0
 216 0001 00       		.byte	0
 217 0002 00       		.byte	0
 218 0003 00       		.byte	0
 219 0004 00       		.byte	0
 220 0005 00       		.byte	0
 221 0006 00       		.byte	0
ARM GAS  /tmp/ccE4vhol.s 			page 10


 222 0007 00       		.byte	0
 223 0008 01       		.byte	1
 224 0009 02       		.byte	2
 225 000a 03       		.byte	3
 226 000b 04       		.byte	4
 227 000c 06       		.byte	6
 228 000d 07       		.byte	7
 229 000e 08       		.byte	8
 230 000f 09       		.byte	9
 231              		.section	.rodata.APBPrescTable,"a",%progbits
 232              		.align	2
 235              	APBPrescTable:
 236 0000 00       		.byte	0
 237 0001 00       		.byte	0
 238 0002 00       		.byte	0
 239 0003 00       		.byte	0
 240 0004 01       		.byte	1
 241 0005 02       		.byte	2
 242 0006 03       		.byte	3
 243 0007 04       		.byte	4
 244              		.section	.data.SystemCoreClock,"aw",%progbits
 245              		.align	2
 246              		.set	.LANCHOR0,. + 0
 249              	SystemCoreClock:
 250 0000 00127A00 		.word	8000000
 251              		.text
 252              	.Letext0:
 253              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 254              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 255              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 256              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xe.h"
ARM GAS  /tmp/ccE4vhol.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f3xx.c
     /tmp/ccE4vhol.s:21     .text.SystemInit:0000000000000000 $t
     /tmp/ccE4vhol.s:26     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccE4vhol.s:81     .text.SystemInit:0000000000000058 $d
     /tmp/ccE4vhol.s:89     .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccE4vhol.s:94     .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccE4vhol.s:199    .text.SystemCoreClockUpdate:000000000000007c $d
     /tmp/ccE4vhol.s:235    .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccE4vhol.s:214    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccE4vhol.s:249    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccE4vhol.s:210    .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccE4vhol.s:232    .rodata.APBPrescTable:0000000000000000 $d
     /tmp/ccE4vhol.s:245    .data.SystemCoreClock:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
